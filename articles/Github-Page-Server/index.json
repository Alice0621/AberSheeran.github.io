{
    "tags": [
        "Python",
        "HTTP"
    ],
    "corpus": "\u7f16\u7a0b\u6742\u8bb0",
    "summary": "\n      \n      \n\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\n2018-02-10\n2018-02-10\nPython,HTTP\n\u7f16\u7a0b\u6742\u8bb0\nGithub-Page-Server\n\n\n\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\n\n\u6700\u8fd1\u5728\u9020\u8f6e\u5b50\uff0c\u4e8e\u662f\u7528Socket\u6807\u51c6\u5e93\u9020\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\u6765\u6a21\u62dfGithubPage\u3002\u9020\u8f6e\u5b50\u7684\u8fc7\u7a0b\u91cc\uff0c\u9047\u5230\u5f88\u591a\u6709\u610f\u601d\u7684\u5751\uff0c\u7531\u4e8e\u5bf9HTTP\u534f\u8bae\u5e76\u4e0d\u719f\u6089\uff0c\u4f5c\u6b64\u6587\u4ee5\u8bb0\u5f55\u3002\n\u7b80\u4ecb\n\n\u629b\u5f00\u66f4\u5e95\u5c42\u7684TCP/IP\u534f\u8bae\uff0c\u53ea\u770b\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u4ea4\u4e92\u3002\u90a3\u4e48HTTP\u5176\u5b9e\u53ea\u5206\u4e24\u4e2a\u90e8\u5206\u3002\nsequenceDiagram\n        opt request\n            Client->>Server: GET /sitemap HTTP/1.1 ...\n        end\n        opt response\n            Server->>Client: HTTP/1.1 200 OK ...\n        end\n\n\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\n\n\n\u8bf7\u6c42\u884c\uff1a\u7c7b\u4f3c\u4e8eGET / HTTP/1.1\n\u5206\u4e09\u4e2a\u90e8\u5206\uff1a\n\n\u8bf7\u6c42\u65b9\u6cd5\uff1a\u4e00\u822c\u5e38\u7528\u7684\u662fGET\u4e0ePOST\n\u8bf7\u6c42\u8d44\u6e90\uff1aURI\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u5f53\u4f5cURL\u53bb\u6389\u57df\u540d\u548c\u534f\u8bae\u4e4b\u540e\u7684\u5269\u4e0b\u7684\u90e8\u5206\n\u8bf7\u6c42\u534f\u8bae\uff1a\u73b0\u5728\u5e38\u89c1\u7684\u662fHTTP/1.1\uff0c\u4e0d\u8fc7HTTP/2.0\u8d8a\u6765\u8d8a\u6d41\u884c\u3002\n\n\n\n\u8bf7\u6c42\u5934\uff1a\u7c7b\u4f3c\u4e8eHOST: blog.cathaysian.cn\uff0c\u4e00\u822c\u7684Web\u6846\u67b6\u6216\u8005\u722c\u866b\u6846\u67b6\uff0c\u90fd\u628a\u8fd9\u4e2a\u90e8\u5206\u89e3\u6790\u6210\u4e00\u4e2aMap\u3002\n\n\n\u8bf7\u6c42\u4f53\uff1a\u4e00\u822c\u662f\u63d0\u4ea4\u6570\u636e\u5b58\u653e\u7684\u5730\u65b9\uff0c\u5f53\u7136\u4e5f\u89c1\u8fc7\u9a9a\u64cd\u4f5c\u628a\u6570\u636e\u653e\u8fdb\u8bf7\u6c42\u5934\u7684\u3002\n\n\n\u670d\u52a1\u7aef\u7684\u54cd\u5e94\u5206\u4e09\u90e8\u5206\uff0c\n\n\n\u72b6\u6001\u884c\uff1a\u7c7b\u4f3c\u4e8eHTTP/1.1 200 OK\n\u5206\u4e09\u4e2a\u90e8\u5206\uff1a\n\n\u54cd\u5e94\u534f\u8bae\uff1a\u540c\u4e0a\uff0c\u5e38\u89c1\u7684\u4e3aHTTP/1.1\n\u72b6\u6001\u7801\uff1a\u4e5f\u5c31\u662f\u6240\u8c13\u7684200\uff0c302\uff0c404\uff0c502\u7b49\u7b49\n\u72b6\u6001\u7801\u7684\u6587\u672c\u63cf\u8ff0\uff1a\u4f8b\u5982\uff0c200\u5bf9\u5e94\u7684\u662fOK\uff0c404\u5bf9\u5e94\u7684\u662fNOT FOUND\n\n\n\n\u54cd\u5e94\u5934\uff1a\u7c7b\u4f3c\u4e8e\u8bf7\u6c42\u5934\uff0c\u5728\u5c01\u88c5\u597d\u7684\u6846\u67b6\u91cc\u4e5f\u662f\u4e00\u4e2aMap\uff0c\u8fd9\u4e2a\u91cc\u9762\u4e0d\u4ec5\u6307\u5b9a\u4e86\u54cd\u5e94\u5185\u5bb9\u7684\u7c7b\u578b\uff0c\u662f\u5426\u538b\u7f29\u7b49\u7b49\uff0c\u4e5f\u4f1a\u8bbe\u7f6ecookie\uff0csession\u7b49\u7528\u4ee5\u6807\u8bc6\u8eab\u4efd\u7684\u73a9\u610f\u3002\u6240\u8c13\u7684\u767b\u9646\uff0c\u5176\u5b9e\u5c31\u662f\u622a\u53d6\u4e86\u8fd9\u90e8\u5206\uff0c\u5728\u4e4b\u540e\u7684\u8bf7\u6c42\u4e2d\u53d1\u9001\u8fc7\u53bb\uff0c\u8ba9\u670d\u52a1\u5668\u77e5\u9053\u201cWho are you\uff1f\u201d\n\n\n\u54cd\u5e94\u4f53\uff1a\u8fd9\u90e8\u5206\u4e5f\u5c31\u662f\u670d\u52a1\u5668\u56de\u590d\u7684\u7ed9\u4f60\u7684\u5185\u5bb9\u3002\u8b6c\u5982 HTML\u9875\u9762\n\n\n\u840c\u65b0\u8d9f\u5751\n\n\u4e00\u4e2a\u6a21\u62dfGithubPage\u7684\u9759\u6001\u670d\u52a1\u5668\u7406\u8bba\u4e0a\u7684\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\u5f53\u6211\u5199\u5b8c\u4e4b\u540e\uff0c\u672c\u5730\u6d4b\u8bd5\u597d\u4e86maltose\u751f\u6210\u7684\u9875\u9762\u6548\u679c\uff0cpush\u5230Github\u4e0a\uff0c\u5c31\u574f\u4e86\u3002\n\u7531\u4e8e\u8bbe\u8ba1\u4e4b\u521d\uff0c\u6211\u662f\u6253\u7b97\u524d\u540e\u7aef\u5206\u79bb\u7684(\u624b\u52a8\u6ed1\u7a3d\u3002\u6ca1\u9519\uff0c\u9759\u6001\u9875\u9762\u6211\u4e5f\u8981\u641e\u524d\u540e\u7aef\u5206\u79bb)\u3002\u7136\u540eajax\u8bf7\u6c42\u7684json\u600e\u4e48\u90fd\u89e3\u6790\u4e0d\u4e86\uff0c\u5728\u5bf9\u6bd4GithubPage\u7684\u54cd\u5e94\u5934\u548c\u6211\u7684PreviewServer\u54cd\u5e94\u5934\u4e4b\u540e\uff0c\u6211\u51ed\u591a\u5e74\u7684\u722c\u866b\u7ecf\u9a8c\u731c\u51fa\u53ef\u80fd\u662fContent-Type\u7684\u9505\u3002\n\u4e8e\u662f\u6539\u6539\u6539\uff0c\u679c\u7136\u3002\u5f53ajax\u8bf7\u6c42\u7684\u662fjson\uff0c\u5b83\u81ea\u5df1\u5c31\u628ajson\u7ed9\u89e3\u6790\u4e86\u3002\u800cHTTP\u4e0d\u9760URL\u6765\u5224\u65ad\u8bf7\u6c42\u7684\u8d44\u6e90\u7c7b\u578b\uff0c\u9760\u7684\u662fContent-Type\u3002\u7136\u540e\u6211\u5728PreviewServer\u91cc\u5199\u4e86\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u54cd\u5e94\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u6210\u529f\u8fc7\u5751\u3002\n\u7136\u540e\u5c31\u662f\u4e00\u4e9b\u5947\u602a\u7684\u5751\u4e86\uff0c\u56e0\u4e3a\u5199PreviewServer\u4e4b\u521d\uff0c\u6211\u5bf9HTTP\u7684\u4e86\u89e3\u5e76\u4e0d\u7cfb\u7edf\uff0c\u5168\u9760Web\u6846\u67b6\u548cRequests\u5e93\u6d3b\u7740(\u6342\u8138)\u3002\u770b\u4e86\u4e00\u4e9b\u4eba\u535a\u5ba2\u4e0a\u5199\u7684\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\uff0c\u641e\u9519\u4e86\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u5f02\u5e38(\u5927\u7ea6\u662f\u8fd9\u4e9b\u535a\u5ba2\u592a\u53e4\u8001\u4e86\u5427)\u3002\n\u5176\u6b21\u662fURL\u7684\u4e2d\u6587\u95ee\u9898\uff0c\u4e4b\u524d\u73a9\u722c\u866b\u7684\u65f6\u5019\u9047\u89c1\u8fc7\uff0c\u6240\u4ee5\u5f88\u5feb\u53cd\u5e94\u8fc7\u6765\u7528urllib\u6807\u51c6\u5e93\u91cc\u7684unquote\u6765\u89e3\u6790\u3002\n\u8fd8\u6709\u5c31\u662f\u5f88\u5947\u602a\u7684\u4e00\u4ef6\u4e8b\uff0c\u5728\u6211PreviewServer\u6210\u529f\u8fd0\u884c\u5341\u5206\u949f\u5de6\u53f3\u4e4b\u540e\uff0c\u83ab\u540d\u51fa\u73b0\u4e86\u4e00\u4e2a\u7a7a\u767d\u8bf7\u6c42\u3002\u8fd9\u4e2a\u8bf7\u6c42\u4ec0\u4e48\u5185\u5bb9\u90fd\u6ca1\u6709\uff0c\u6211\u4fee\u6539\u4e86\u4ee3\u7801\uff0c\u6355\u6349\u5230\u8fd9\u4e2a\u7a7a\u767d\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u628a\u6574\u4e2a\u8bf7\u6c42\u5168\u90e8\u6253\u5370\u51fa\u6765\uff0c\u7ed3\u679c\u4e5f\u53ea\u662f\u7a7a\u767d\u3002\u8c37\u6b4c\u4e86\u4e5f\u6ca1\u6709\u8c37\u6b4c\u5230\u522b\u4eba\u63d0\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u603b\u4e4b\u6700\u540e\u4e00\u4e2atry\u628a\u8fd9\u4e2a\u73a9\u610f\u5ffd\u7565\u4e86\u3002\n\u6700\u540e\uff0c\u4e0a\u4ee3\u7801\uff01Win10\u4e0a\u5b9e\u6d4b\u4ece\u65e0\u6545\u969c\uff0c\u6297\u4f4f\u4e86\u6bcf\u79d2\u5341\u4f59\u6b21\u7684\u8bf7\u6c42\u91cf(\u6ed1\u7a3d\nimport socket\nimport os.path\nimport threading\nimport re\nimport logging\nimport sys\nimport time\nfrom urllib.parse import unquote\n\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='[%(levelname)s]-[%(asctime)s]==> %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S',\n)\n\n\nclass Main:\n    def __init__(self, ip: str, port: int, path):\n        self.path = path\n        self.pattern = re.compile(r'GET (?P<file>\\S+) HTTP')\n        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server.bind((ip, port))\n        self.server.listen(120)\n        logging.info(\"Running in {0}:{1}\".format(ip, port))\n        logging.info(\"File root directory in {0}\".format(path))\n\n    def __del__(self):\n        self.server.close()\n        logging.info('Stopping Server.')\n\n    def __set_response_file_type(self, filename):\n        request_file_type = filename.split(\".\")[-1]\n        if request_file_type == 'json':\n            return \"application/json;\"\n        elif request_file_type == 'html':\n            return \"text/html;\"\n        elif request_file_type == \"xml\":\n            return \"application/xml;\"\n        elif request_file_type == \"js\":\n            return \"application/javascript\"\n        elif request_file_type == \"css\":\n            return \"text/css\"\n        # TODO \u589e\u52a0\u5176\u4ed6\u7c7b\u578b\u6587\u4ef6\u7684\u54cd\u5e94\u5934\n        else:\n            return None\n\n    def __deal_response(self, status_code: int, header: dict, body):\n        if status_code == 200:\n            response_code = b\"HTTP/1.1 200 OK\\r\\n\"\n        elif status_code == 404:\n            response_code = b\"HTTP/1.1 404 NOT Found\\r\\n\"\n        # TODO \u589e\u52a0\u5176\u4ed6\u72b6\u6001\u7801\n        response_header = b\"Server: My Static Page Preview Server\\r\\n\"\n        for key, value in header.items():\n            response_header += (\"{}:{}\\r\\n\".format(key, value)).encode(\"UTF-8\")\n        try: # \u5904\u7406body\n            body = body.encode(\"UTF-8\")\n        except AttributeError:\n            pass\n        response = response_code + response_header + b\"\\r\\n\" + body\n        return response\n\n    def __deal_request(self, request: str):\n        # \u4f1a\u51fa\u73b0\u5947\u602a\u7684\u7a7a\u767d\u8bbf\u95ee,\u5565\u4e5f\u6ca1\u6709,try\u4e00\u4e0b,\u4e0d\u5904\u7406\n        try:\n            # \u83b7\u53d6\u8bf7\u6c42\u7684\u8def\u5f84\n            request_file = self.pattern.match(request.splitlines()[0]).group(\"file\")\n            request_file = unquote(request_file)\n        except IndexError:\n            sys.exit()\n        # \u5982\u679c\u6700\u540e\u662f/,\u6309\u7167GithubPage\u7684\u89c4\u5219,\u89e3\u6790\u5230index.html\u4e0a\n        if request_file[-1] == \"/\":\n            request_file += \"index.html\"\n        # \u5207\u6389\u7b2c\u4e00\u4e2a/, \u5426\u5219\u62fc\u63a5\u8def\u5f84\u4f1a\u51fa\u9519\n        return os.path.join(self.path, request_file[1:])\n\n    def __link(self, sock):\n        request = sock.recv(1024)\n        request = request.decode(\"UTF-8\")\n        request_file = self.__deal_request(request)\n        # \u6253\u5f00\u6587\u4ef6,\u5e76\u8bbe\u7f6e\u54cd\u5e94\u5185\u5bb9\n        try:\n            file = open(request_file, \"rb\")\n            file_data = file.read()\n            file.close()\n        except FileNotFoundError:\n            logging.warning(\"404 Not Found {}\".format(request_file))\n            response = self.__deal_response(404, {\"mood\":\"What the fuck are your request?\"}, b\"The file not found!\")\n        else:\n            logging.info(\"Send file '{}'\".format(request_file))\n            response_header = {\"Content-Type\": self.__set_response_file_type(request_file)}\n            response = self.__deal_response(200, response_header, file_data)\n        # +1s\n        # \u4e3a\u4e86\u6a21\u62df\u771f\u5b9e\u7684Github\u670d\u52a1\u5668\u53cd\u9988\u901f\u5ea6\n        time.sleep(1)\n\n        sock.send(response)\n        sock.close()\n\n    def run(self):\n        while True:\n            sock, _ = self.server.accept()\n            client = threading.Thread(target=self.__link, args=(sock,))\n            client.daemon = True\n            client.start()\n\n\nif __name__ == '__main__':\n    server = Main(\"0.0.0.0\", 8000, \"D:\\\\Documents\")\n    server.run()\n\n\u9020\u5b8c\u8fd9\u4e2a\u8f6e\u5b50\uff0c\u8ba9\u6211\u6709\u79cd\u81ea\u5df1\u5199\u4e00\u4e2aweb\u6846\u67b6\u7684\u51b2\u52a8\u3002\n\n      \n      \n\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668\n\n\u7b80\u4ecb\n\u840c\u65b0\u8d9f\u5751\n\n\n\n\n      \u2261\n    ",
    "permalink": "Github-Page-Server",
    "update": "2018-02-10",
    "title": "\u9759\u6001\u6587\u4ef6\u670d\u52a1\u5668",
    "date": "2018-02-10"
}